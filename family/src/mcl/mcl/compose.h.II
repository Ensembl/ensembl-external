/*
// compose.h            MCL-specific compose routines
//
// description          Enhanced compose function that adds statistics
//                      and more flexible `pruning' (removal of
//                      lower-valued entries).
*/

#ifndef MCL_COMPOSE__
#define MCL_COMPOSE__

#include <stdio.h>

#include "util/distr.h"
#include "nonema/matrix.h"

/*
 * description       struct mcxComposeStats
 *
 *                   Structure mcxComposeStats is used to transmit information
 *                   about the squaring of a stochastic matrix by means of
 *                   mcxFlowCompose(). It is intended to provide the means
 *                   of observing and studying the effect of design decisions
 *                   in mcxFlowCompose on its complexity behaviour and on
 *                   its performance.
 *
 *                   This structure is passed to both mcxFlowCompose and
 *                   mcxComposeStatsPrint. The latter prints statistics
 *                   contained in mcxComposeStats.  The structure may
 *                   contain dynamically allocated memory (member barDb),
 *                   and is in each call of mcxFlowCompose reset by
 *                   mcxComposeStatsReset.
 *
 *                   $inhomogeneity is the maximum over all columns of the
 *                   product matrix computed by mcxFlowCompose() of the
 *                   'inhomogeneity' of the vector, which is measured as
 *                   |max(vec)-center(vec)|.
*/

typedef struct
{  
   mcxDistr*         vDb                /* vector size                  */
;  mcxDistr*         pDb                /* pruned vector sizes          */
;  mcxDistr*         hDb                /* best hint size               */
;  mcxDistr*         mDb                /* vector mass                  */
;  int               dbAllocated
;  mcxDistr*         dbList[5]          /* array of *db's above         */
;  float             inhomogeneity
;  int               n_selectHighest
;  int               massNx
;  int               massNy
;
}  mcxComposeStats   ;


extern int hintScores[5];

mcxComposeStats* mcxComposeStatsNew
(  int   dbSize
)  ;

void mcxComposeStatsReset
(mcxComposeStats* stats
)  ;

void mcxComposeStatsFree
(mcxComposeStats* stats
)  ;

void mcxComposeStatsPrint
(  mcxComposeStats*  stats
,  FILE*             fp
)  ;

/*
////////////////////////////////////////////////////////////////////////////////
//
// description       struct mcxComposeParam
//                   This structure must be initialized by mcxComposeParamInit.
//                   It stores all arguments to mcxFlowCompose().  All
//                   arguments of mcxComposeParam are related to selecting
//                   the highest (valued) Index Value Pairs of a vector.

// maxDensity        Sets a bound on the number of entries.

// precision         Is only in effect if maxDensity is set to zero.
*/
typedef struct
{  int                  maxDensity
;  float                precision
;  int                  precisionExponent
;  float                alwaysBarWeight
;  float                threeTwoWeight
;  float                centerWeight
;  float                cubeWeight
;  float                maxValWeight1
;  float                maxValWeight2
;
}  mcxComposeParam;

mcxComposeParam* mcxComposeParamNew(void);

mcxMatrix* mcxFlowExpand
(  const mcxMatrix*           mx
,  mcxComposeParam*        composeParam
,  mcxComposeStats*        stats
)  ;

mcxMatrix* mcxFlowCompose
(  const mcxMatrix*           mx1
,  const mcxMatrix*           mx2
,  mcxComposeParam*        composeParam
,  mcxComposeStats*        stats
)  ;

extern __inline mcxMatrix* mcxFlowExpand
(  const mcxMatrix*           mx
,  mcxComposeParam*        composeParam
,  mcxComposeStats*        stats
)  {  return
      mcxFlowCompose
      (  mx
      ,  mx
      ,  composeParam
      ,  stats
      )
;  }

#endif

